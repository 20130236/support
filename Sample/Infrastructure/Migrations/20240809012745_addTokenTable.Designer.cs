// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sample.Infrastructure.DataContext;

#nullable disable

namespace Sample.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240809012745_addTokenTable")]
    partial class addTokenTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sample.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian khởi tạo");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người tạo");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian xóa");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Mật khẩu");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Mã vai trò");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Tên vai trò");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian chỉnh sửa cuối");

                    b.Property<Guid?>("UpdatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người chỉnh sửa");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasComment("Tên tài khoản");

                    b.HasKey("Id");

                    b.HasIndex("CreateAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleteAt");

                    b.HasIndex("UpdateAt");

                    b.HasIndex("UpdatorId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Account", t =>
                        {
                            t.HasComment("Tài khoản");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("653dc4d4-ca05-45ac-83cd-e98fa91b890f"),
                            Password = "123",
                            RoleCode = "SV",
                            RoleName = "Sinh viên",
                            UserName = "usernameSV"
                        },
                        new
                        {
                            Id = new Guid("6f6e615e-feeb-40b5-b53c-7f9056082d36"),
                            Password = "123",
                            RoleCode = "GV",
                            RoleName = "Giáo viên",
                            UserName = "usernameGV"
                        });
                });

            modelBuilder.Entity("Sample.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Mã số");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian khởi tạo");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người tạo");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian xóa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Tên gọi");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian chỉnh sửa cuối");

                    b.Property<Guid?>("UpdatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người chỉnh sửa");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreateAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleteAt");

                    b.HasIndex("Name");

                    b.HasIndex("TeacherId")
                        .IsUnique();

                    b.HasIndex("UpdateAt");

                    b.HasIndex("UpdatorId");

                    b.ToTable("Class", t =>
                        {
                            t.HasComment("Lớp học");
                        });
                });

            modelBuilder.Entity("Sample.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian khởi tạo");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người tạo");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian xóa");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian chỉnh sửa cuối");

                    b.Property<Guid?>("UpdatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người chỉnh sửa");

                    b.HasKey("Id");

                    b.HasIndex("CreateAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleteAt");

                    b.HasIndex("UpdateAt");

                    b.HasIndex("UpdatorId");

                    b.ToTable("RefreshToken", t =>
                        {
                            t.HasComment("Token");
                        });
                });

            modelBuilder.Entity("Sample.Domain.Entities.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Mã số");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian khởi tạo");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người tạo");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian xóa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Tên gọi");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian chỉnh sửa cuối");

                    b.Property<Guid?>("UpdatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người chỉnh sửa");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreateAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleteAt");

                    b.HasIndex("Name");

                    b.HasIndex("UpdateAt");

                    b.HasIndex("UpdatorId");

                    b.ToTable("Site", t =>
                        {
                            t.HasComment("Chi nhánh");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a2ed7c2-e6f7-48c1-a86a-aa701aee1e22"),
                            Code = "H001",
                            Name = "Quận 5"
                        },
                        new
                        {
                            Id = new Guid("3e08cf2e-d8a2-49b5-8663-fa31f0cdd168"),
                            Code = "H002",
                            Name = "Quận 6"
                        });
                });

            modelBuilder.Entity("Sample.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasComment("Id lớp học");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Mã số");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian khởi tạo");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người tạo");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian xóa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasComment("Tên gọi");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian chỉnh sửa cuối");

                    b.Property<Guid?>("UpdatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người chỉnh sửa");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreateAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleteAt");

                    b.HasIndex("Name");

                    b.HasIndex("UpdateAt");

                    b.HasIndex("UpdatorId");

                    b.ToTable("Student", t =>
                        {
                            t.HasComment("Sinh viên");
                        });
                });

            modelBuilder.Entity("Sample.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Mã số");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian khởi tạo");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người tạo");

                    b.Property<DateTime?>("DeleteAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian xóa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Tên gọi");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Thời gian chỉnh sửa cuối");

                    b.Property<Guid?>("UpdatorId")
                        .HasColumnType("uuid")
                        .HasComment("Id người chỉnh sửa");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreateAt");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DeleteAt");

                    b.HasIndex("Name");

                    b.HasIndex("UpdateAt");

                    b.HasIndex("UpdatorId");

                    b.ToTable("Teacher", t =>
                        {
                            t.HasComment("Giáo viên");
                        });
                });

            modelBuilder.Entity("Sample.Domain.Entities.Class", b =>
                {
                    b.HasOne("Sample.Domain.Entities.Teacher", "Teacher")
                        .WithOne("Class")
                        .HasForeignKey("Sample.Domain.Entities.Class", "TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Sample.Domain.Entities.Student", b =>
                {
                    b.HasOne("Sample.Domain.Entities.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Sample.Domain.Entities.Class", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Sample.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Class")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
